#Terraform Backend Setup (S3 + DynamoDB)

terraform {
  backend "s3" {
    bucket         = "my-terraform-state-bucket"
    key            = "envs/app-migration/terraform.tfstate"
    region         = "us-east-1"
    dynamodb_table = "terraform-lock"
    encrypt        = true
  }
}

#VPC Creation for New AWS Accounts

module "vpc" {
  source  = "terraform-aws-modules/vpc/aws"
  version = "3.19.0"

  name = "app-vpc"
  cidr = "10.0.0.0/16"

  azs             = ["us-east-1a", "us-east-1b"]
  public_subnets  = ["10.0.1.0/24", "10.0.2.0/24"]
  private_subnets = ["10.0.3.0/24", "10.0.4.0/24"]

  enable_nat_gateway = true
  single_nat_gateway = true
  enable_dns_support = true
  enable_dns_hostnames = true

  tags = {
    Project = "App Migration"
  }
}

#Security Group & Firewall Rules

resource "aws_security_group" "app_sg" {
  name        = "app-security-group"
  description = "Security group for application"
  vpc_id      = module.vpc.vpc_id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "app-security-group"
  }
}

#IAM Role for Cross-Account Access

resource "aws_iam_role" "app_role" {
  name = "AppMigrationRole"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Effect = "Allow"
      Principal = {
        AWS = "arn:aws:iam::123456789012:role/Admin"
      }
      Action = "sts:AssumeRole"
    }]
  })

  tags = {
    Project = "App Migration"
  }
}

#Application Load Balancer (ALB)

resource "aws_lb" "app_alb" {
  name               = "app-alb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.app_sg.id]
  subnets            = module.vpc.public_subnets

  enable_deletion_protection = false

  tags = {
    Name = "app-alb"
  }
}

#RDS Database Migration

resource "aws_db_instance" "app_db" {
  identifier             = "app-db"
  engine                 = "mysql"
  instance_class         = "db.t3.micro"
  allocated_storage      = 20
  username              = "admin"
  password              = "SuperSecurePassword"
  parameter_group_name  = "default.mysql8.0"
  publicly_accessible   = false
  skip_final_snapshot   = true
  vpc_security_group_ids = [aws_security_group.app_sg.id]
  db_subnet_group_name  = module.vpc.database_subnet_group

  tags = {
    Name = "app-db"
  }
}

#ECS for Microservices (Fargate)

resource "aws_ecs_cluster" "app_cluster" {
  name = "app-cluster"
}

resource "aws_ecs_task_definition" "app_task" {
  family                   = "app-task"
  network_mode             = "awsvpc"
  requires_compatibilities = ["FARGATE"]
  cpu                      = "512"
  memory                   = "1024"

  container_definitions = jsonencode([{
    name      = "app-container"
    image     = "123456789012.dkr.ecr.us-east-1.amazonaws.com/my-app:latest"
    essential = true
    portMappings = [{
      containerPort = 80
      hostPort      = 80
    }]
  }])
}

resource "aws_ecs_service" "app_service" {
  name            = "app-service"
  cluster         = aws_ecs_cluster.app_cluster.id
  task_definition = aws_ecs_task_definition.app_task.arn
  desired_count   = 2
  launch_type     = "FARGATE"

  network_configuration {
    subnets         = module.vpc.private_subnets
    security_groups = [aws_security_group.app_sg.id]
  }
}

#Route 53 DNS Configuration

resource "aws_route53_record" "app_dns" {
  zone_id = "Z3ABCEXAMPLE"
  name    = "app.example.com"
  type    = "A"
  alias {
    name                   = aws_lb.app_alb.dns_name
    zone_id                = aws_lb.app_alb.zone_id
    evaluate_target_health = true
  }
}

terraform init

terraform plan

terraform apply -auto-approve



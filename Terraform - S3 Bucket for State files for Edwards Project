#bash script to Create S3 Bucket for for Terraform State files

aws s3api create-bucket --bucket my-terraform-state-bucket --region us-east-1

#enable versioning

aws s3api put-bucket-versioning \
  --bucket my-terraform-state-bucket \
  --versioning-configuration Status=Enabled

#enable default encryption (optional but recommended)

aws s3api put-bucket-encryption \
  --bucket my-terraform-state-bucket \
  --server-side-encryption-configuration '{
    "Rules": [{
      "ApplyServerSideEncryptionByDefault": {
        "SSEAlgorithm": "AES256"
      }
    }]
  }'

#Create DynamoDB Table for State Locking - prevents concurrent 'terraform apply' operations

aws dynamodb create-table \
  --table-name terraform-locks \
  --attribute-definitions AttributeName=LockID,AttributeType=S \
  --key-schema AttributeName=LockID,KeyType=HASH \
  --billing-mode PAY_PER_REQUEST

#Terraform Backed - Inside your Terraform project (e.g., main.tf), do not use variables for backend values. Instead, use a backend.tf like this:

terraform {
  backend "s3" {
    bucket         = "my-terraform-state-bucket"
    key            = "dev/us-east-1/app1/terraform.tfstate"
    region         = "us-east-1"
    dynamodb_table = "terraform-locks"  # Optional
    encrypt        = true
  }
}

#initialize Terraform with Remote Backend - bash

terraform init

#IAM Policy for Terraform Access - json

{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:GetObject",
        "s3:PutObject",
        "s3:ListBucket"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:s3:::my-terraform-state-bucket",
        "arn:aws:s3:::my-terraform-state-bucket/*"
      ]
    },
    {
      "Action": [
        "dynamodb:PutItem",
        "dynamodb:GetItem",
        "dynamodb:DeleteItem"
      ],
      "Effect": "Allow",
      "Resource": "arn:aws:dynamodb:us-east-1:123456789012:table/terraform-locks"
    }
  ]
}


